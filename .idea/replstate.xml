<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1462964199751">{:repl-history {:ide [], :local [&quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 22))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 20))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 19))) (:clues cc))&quot; &quot;(show-sol 1 (filter map? (tree-seq (complement map?) identity  (nth sols 4))) (:clues cc))&quot; &quot;(show-sol 2 (filter map? (tree-seq (complement map?) identity  (nth sols 1))) (:clues cc))&quot; &quot;(code-solver-from-all-clues (:clues cc) sol5)\n                &quot; &quot;(filter map? (tree-seq (complement map?) identity  (nth sols 1)))&quot; &quot;(filter map? (tree-seq (complement map?) identity  (nth sols 21)))&quot; &quot;(filter map? (tree-seq (complement map?) identity  (nth sols 22)))&quot; &quot;(empty? (filter map? (tree-seq (complement map?) identity  (nth sols 22))))&quot; &quot;(empty? (filter map? (tree-seq (complement map?) identity  (nth sols 21))))&quot; &quot;(defn iterate-code-solver-from-all-clues\n  [clues assigned-letters-map]\n  (loop\n    [output assigned-letters-map \n     alm (code-solver-from-all-clues clues assigned-letters-map)]\n    (if (empty? (filter map? (tree-seq (complement map?) identity  alm)))\n      output\n      (recur alm (code-solver-from-all-clues clues alm)))))&quot; &quot;*1&quot; &quot;(defn iterate-code-solver-from-all-clues\n  [clues assigned-letters-map]\n  (loop\n    [output assigned-letters-map\n     alm (code-solver-from-all-clues clues assigned-letters-map)]\n    (if (empty? (filter map? (tree-seq (complement map?) identity  alm)))\n      (filter map? (tree-seq (complement map?) identity  output))\n      (recur alm (code-solver-from-all-clues clues alm)))))&quot; &quot;(-main 2)&quot; &quot;(-main 6)&quot; &quot;(solve-example-cc 7)&quot; &quot;(solve-example-cc 4)&quot; &quot;(-main 7)&quot; &quot;(show-sol 1 (filter map? (tree-seq (complement map?) identity  (nth sols 1))) (:clues cc))&quot; &quot;(def cc (get-cc 7))\n                &quot; &quot;(solve-example-cc 3)&quot; &quot;(filter number? [1 2 \\a \\c 5])&quot; &quot;(complete? [1 2 3] {1 \\a 2 \\b 3 \\c})&quot; &quot;(if (complete? [1 2 3] {1 \\a 2 \\b 4 \\c}) \&quot;complete\&quot; \&quot;not complete\&quot;)&quot; &quot;(if (complete? [1 2 3] {1 \\a 2 \\b 3 \\c}) \&quot;complete\&quot; \&quot;not complete\&quot;)&quot; &quot;(score-clue-on-count [1 2 3] {1 \\c 2 \\a 3 \\t})&quot; &quot;(score-clue-on-count [1 2 3] {1 \\c 2 \\a 3 \\x})&quot; &quot;(score-clue-on-count [1 2 3] {1 \\c 2 \\a})&quot; &quot;(find-all-words [1 2 3] {1 \\c 2 \\a})&quot; &quot;(/ 8)&quot; &quot;(- (/ 8))&quot; &quot;(find-all-words [1 2 3 2 1] {})&quot; &quot;(score-clue-on-count [1 2 3 2 1] {})&quot; &quot;(score-clue-on-count [1 2 3 2 1] {1 \\c})&quot; &quot;(score-clue-on-count [1 2 3 ] {})&quot; &quot;cc&quot; &quot;(iterate-code-solver-from-all-clues (:clues cc) (:encodemap cc))&quot; &quot;(def x [1 1 2])&quot; &quot;(distinct x)&quot; &quot;(distinct? x)&quot; &quot;(apply distinct? x)&quot; &quot;(-main 1)&quot; &quot;(-main 3)&quot; &quot;(-main 5)&quot; &quot;(-main 4)&quot; &quot;(take 1 sols)&quot; &quot;(take 3 sols)&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 5))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 6))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 8))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 9))) (:clues cc))&quot; &quot;(count sols)&quot; &quot;ddd&quot; &quot;(def cc (get-cc 3))\n                &quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 0))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 1))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 2))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 3))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 4))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 7))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 10))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 11))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 12))) (:clues cc))&quot; &quot;(def sols (iterate #(code-solver-from-all-clues (:clues cc) %) (:encodemap cc)))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 14))) (:clues cc))&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 15))) (:clues cc))&quot; &quot;(def sols (iterate #(code-solver-from-all-clues (:clues cc) % rank-n-sort-clues-on-count) (:encodemap cc)))\n&quot; &quot;(show-sol 0 (filter map? (tree-seq (complement map?) identity  (nth sols 13))) (:clues cc))&quot; &quot;(solve-example-cc 1 iterate-code-solver-from-all-clues rank-n-sort-clues-on-count)&quot; &quot;(solve-example-cc 1 iterate-code-solver-from-all-clues rank-filtered-n-sort-clues-on-count)&quot; &quot;(solve-example-cc 1 code-solver-using-best-clue rank-n-sort-clues-on-count)&quot; &quot;(solve-example-cc 1 code-solver-using-best-clue rank-filtered-n-sort-clues-on-count)&quot; &quot;(solve-example-cc 3 iterate-code-solver-from-all-clues rank-filtered-n-sort-clues-on-count)&quot; &quot;(solve-example-cc 3 code-solver-using-best-clue rank-n-sort-clues-on-count)&quot; &quot;(solve-example-cc 7 code-solver-using-best-clue rank-filtered-n-sort-clues-on-count)&quot; &quot;(myvars)&quot; &quot;CCdata&quot; &quot;(def ttt \&quot;test\&quot;   3)&quot; &quot;ttt&quot; &quot;(doc ttt)&quot; &quot;(doc def)&quot; &quot;(code-solver [1 2 3 4] {1 \\a 2 \\b})&quot; &quot;(code-solver [1 2 3 4 3] {1 \\a 2 \\b})&quot; &quot;(code-solver [1 2 3 4 3] {1 \\a})&quot; &quot;(code-solver [1 2 13 24 13] {1 \\a})&quot; &quot;(test-cc-48 3)&quot; &quot;(complement zero? 4)&quot; &quot;((complement zero?) 4)&quot; &quot;((complement zero?) 0)&quot; &quot;(solve-example-cc 1 code-solver-using-best-clue rank-n-sort-clues)&quot; &quot;(solve-example-cc 3 code-solver-using-best-clue rank-n-sort-clues)&quot; &quot;(solve-example-cc 3 code-solver-using-best-clue rank-filtered-n-sort-clues-on-count)&quot; &quot;(solve-example-cc 1 iterate-code-solver-from-all-clues rank-n-sort-clues)&quot; &quot;(solve-example-cc 3 iterate-code-solver-from-all-clues rank-n-sort-clues)&quot; &quot;(solve-example-cc 3 iterate-code-solver-from-all-clues rank-n-sort-clues-on-count)&quot; &quot;(make-example \&quot;pas pals clap sap lap slap claps pal\&quot;)&quot; &quot;(def clues [[1 2 3 2 1],[1 5 6],[6 7 8 9], [9 10 11 12]])&quot; &quot;(def ans (brute-solver-from-4-clues clues {}))&quot; &quot;(show-sol 75342 ans clues)&quot; &quot;(show-sol 75343 ans clues)&quot;], :remote []}}</component>
</project>