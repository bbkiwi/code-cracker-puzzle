<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1463549012771">{:repl-history {:ide [], :local [&quot;(type (nth cc1 ))&quot; &quot;(def cc1 (children-from-clue cc 0))&quot; &quot;(doc map)&quot; &quot;(cond [1 2 3] [4 5 6])&quot; &quot;(cons [1 2 3] [4 5 6])&quot; &quot;(doc cons)&quot; &quot;(doc replace)&quot; &quot;(replace {1 /. 2/.} [\\a 1 2 \\b])&quot; &quot;(replace {1 \\. 2 \\.} [\\a 1 2 \\b])&quot; &quot;(str/join \&quot;\&quot; *1)&quot; &quot;(keys cc)&quot; &quot;(zipmap (range 1 27) (repeat 27 \\.))&quot; &quot;(doc apply)&quot; &quot;(def cc (set-inital-partial-sol (get-cc 3)))&quot; &quot;(cc :partialwords)&quot; &quot;(nice-print cc1 0)&quot; &quot;(min 4 5)&quot; &quot;(def cc2 (children-from-clue (first cc1) 3))&quot; &quot;(def cc2 (children-from-clue (first cc1) 2))&quot; &quot;(def cc2 (children-from-clue (first cc1) 12))&quot; &quot;(nice-print cc2 0)&quot; &quot;(nice-print cc2 1)&quot; &quot;(nice-print cc2 2)&quot; &quot;(doc some)&quot; &quot;(doc some?)&quot; &quot;(doc every)&quot; &quot;(doc every?)&quot; &quot;(doc not=)&quot; &quot;(type cc2)&quot; &quot;(doc for)&quot; &quot;(take 100 (for [x (range 100000000) y (range 1000000) :while (&lt; y x)] [x y]))&quot; &quot;(take 10 (for [x (range 100000000) y (range 1000000) :while (&lt; y x)] [x y]))&quot; &quot;(doc concat)&quot; &quot;(concat [1 2 3] [4 5 6])&quot; &quot;(def cc1 (children-from-clue cc 1))&quot; &quot;(def cc1 (children cc [1]))&quot; &quot;(def cca (nth cc1 0))&quot; &quot;(def cc1 (children cca [1]))&quot; &quot;(def cc1 (children cca [2]))&quot; &quot;(count cc2)&quot; &quot;(def cc1a (children-from-clue cca 12))&quot; &quot;(count cc1a)&quot; &quot;(def cc1b (children-from-clue cca 15))&quot; &quot;(count cc1b)&quot; &quot;(doc inspect)&quot; &quot;(doc inspector)&quot; &quot;(count (nth cc2 0))&quot; &quot;(keys (nth cc2 0))&quot; &quot;(key1 (nth cc2 0))&quot; &quot;(keys (nth cc2 1))&quot; &quot;(keys (nth cc2 2))&quot; &quot;(keys (nth cc2 3))&quot; &quot;(concat (lazy-seq) {:a 1 :b 2})&quot; &quot;(concat (lazy-seq) '({:a 1 :b 2}))&quot; &quot;(concat *1 '({:a 1 :b 2}))&quot; &quot;(def cc1 (children cca [12 15]))&quot; &quot;(count cc1)&quot; &quot;(zipmap (range 4) [3 5 2 8])&quot; &quot;(def tm (zipmap (range 4) [3 5 2 8]))&quot; &quot;tm&quot; &quot;(keys tm)&quot; &quot;(vals tm)&quot; &quot;(map last tm)&quot; &quot;(map next tm)&quot; &quot;(sort #(&lt;= (last tm) %) tm)&quot; &quot;(sort #(&lt;= (last %)) tm)&quot; &quot;(sort #(last %) tm)&quot; &quot;(example sort)&quot; &quot;(doc sort)&quot; &quot;(sort #(&lt; (last %1) (last %2)) tm)&quot; &quot;(keys *1)&quot; &quot;(def root (set-inital-partial-sol (get-cc 1)))&quot; &quot;(def root (set-inital-partial-sol (get-cc 2)))&quot; &quot;(def root (set-inital-partial-sol (get-cc 3)))&quot; &quot;(take 1 ans)&quot; &quot;(take 2 ans)&quot; &quot;()&quot; &quot;(nice-print (nth ans 0))&quot; &quot;(nice-print (nth ans 0) 0)&quot; &quot;(nth ans 0)&quot; &quot;(nice-print ans 1)&quot; &quot;(def root (set-inital-partial-sol (get-cc 4)))&quot; &quot;(make-example-for-work \&quot;pas pals clap sap lap slap claps pal\&quot;)&quot; &quot;(def root (make-example-for-work \&quot;pas pals clap sap lap slap claps pal\&quot;))&quot; &quot;(def ans (filter (complement non-completed?) (tree-seq non-completed? children root)))&quot; &quot;(nice-print ans 0)&quot; &quot;(filtercode {7 \\a, 13 \\w, 9 \\c, 5 \\s, 14 \\i, 10 \\u, 8 \\b} \&quot;abacus\&quot; [7 8 7 9 10 5] [7 8 7] [\&quot;aba\&quot; \&quot;aca\&quot;])&quot; &quot;(filtercode {7 \\a, 13 \\w, 9 \\c, 5 \\s, 14 \\i, 10 \\u, 8 \\b} [7 8 7 9 10 5] \&quot;abacus\&quot; [7 8 7] [\&quot;aba\&quot; \&quot;aca\&quot;])&quot; &quot;(filtercode {13 \\w, 9 \\c, 5 \\s, 14 \\i, 10 \\u, 8 \\b} [7 8 7 9 10 5] \&quot;abacus\&quot; [7 8 7] [\&quot;aba\&quot; \&quot;aca\&quot;])&quot; &quot;(filter identity [ 1 2 3 nil 4 5])&quot; &quot;(code-cracker-pat-to-regexpat \&quot;b12t\&quot; \&quot;\&quot;)&quot; &quot;(first \&quot;b12c1\&quot;)&quot; &quot;(rest \&quot;b12c1\&quot;)&quot; &quot;(code-cracker-pat-to-regexpat \&quot;b12c1\&quot; \&quot;\&quot;)&quot; &quot;(code-cracker-pat-to-regexpat-filter \&quot;b12c1\&quot; \&quot;\&quot;)&quot; &quot;(code-cracker-pat-to-regexpat-filter \&quot;b12c1\&quot; \&quot;wxyz\&quot;)&quot; &quot;(code-cracker-pat-to-regexpat-filter \&quot;b12c1\&quot; \&quot;a-z\&quot;)&quot; &quot;(code-cracker-pat-to-regexpat-filter \&quot;b12c1\&quot; \&quot;ab-z\&quot;)&quot; &quot;(make-code-cracker-pat [\\b 10 12 \\c 10])&quot; &quot;(make-code-cracker-pat [\\b 10 12 \\c 10 12 10 \\f])&quot; &quot;(code-cracker-pat-to-regexpat-filter \&quot;b12c121f\&quot; \&quot;abcdefghijkl\&quot;)&quot;], :remote []}}</component>
</project>