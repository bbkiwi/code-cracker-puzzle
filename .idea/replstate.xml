<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1462524621268">{:repl-history {:ide [], :local [&quot;(def ans (brute-solver-from-4-clues clues {} ))&quot; &quot;(doc take)&quot; &quot;(take 3 good-order-clues)&quot; &quot;(def all-clues (distinct (concat good-order-clues (:clues cc))))&quot; &quot;(def all-clues (distinct (concat (take 5 good-order-clues) (:clues cc))))&quot; &quot;(def all-clues (distinct (concat (take 3 good-order-clues) (:clues cc))))&quot; &quot;(code-solver-from-clues all-clues (:encodemap cc))&quot; &quot;(def all-clues (distinct (concat (take 1 good-order-clues) (:clues cc))))&quot; &quot;(def ans (code-solver-from-clues all-clues (:encodemap cc)))&quot; &quot;(def maps-in-ans (filter map? (tree-seq (complement map?) identity ans)))&quot; &quot;(show-sol 0 maps-in-ans all-clues)&quot; &quot;(def all-clues (distinct (concat (take 0 good-order-clues) (:clues cc))))&quot; &quot;all-clues&quot; &quot;(test-cc-48 18)&quot; &quot;(test-cc-48 3)&quot; &quot;(test-cc-48 2)&quot; &quot;(test-cc-48 20)&quot; &quot;(test-cc-48 0)&quot; &quot;(time (test-cc-48 10))&quot; &quot;(time (test-cc-48 5))&quot; &quot;(time (test-cc-48 3))&quot; &quot;(time (test-cc-48 2))&quot; &quot;(time (test-cc-48 1))&quot; &quot;(time (test-cc-48 0))&quot; &quot;(distinct [1 2 3 4])&quot; &quot;(distinct [1 2 3 4 4 3])&quot; &quot;(distinct? [1 2 3 4 4 3])&quot; &quot;(distinct? [1 2 3 4])&quot; &quot;(apply distinct? [1 2 3 4])&quot; &quot;(apply distinct? [1 2 3 4 4 3])&quot; &quot;(doc distinct)&quot; &quot;(doc distinct?)&quot; &quot;(rand-int 50)&quot; &quot;(repeatedly 10 (rand-int 9))&quot; &quot;(doc repeatedly)&quot; &quot;(repeatedly 5 rand)&quot; &quot;(rand)&quot; &quot;(repeatedly 5 rand-int)&quot; &quot;(repeatedly 5 #(rand-int 10))&quot; &quot;(repeatedly 50 #(rand-int 10))&quot; &quot;(distinct (repeatedly 50 #(rand-int 10)))&quot; &quot;(apply distinct? (distinct x))&quot; &quot;(def x 3)\n(apply distinct? (distinct x))&quot; &quot;(def x #{1 2 3 4 3})\n(apply distinct? (distinct x))&quot; &quot;(def x [1 2 3 2 2])\n(apply distinct? (distinct x))&quot; &quot;(def x \&quot;abcd\&quot;)\n(apply distinct? (distinct x))&quot; &quot;(def x \&quot;abcdfed\&quot;)\n(apply distinct? (distinct x))&quot; &quot;(distinct x)&quot; &quot;(distinct {:a 1})&quot; &quot;(coll? {:a 1})&quot; &quot;(map? {:a 1 :b 33})&quot; &quot;(coll? {:a 1 :b 33})&quot; &quot;(distinct {:a 1 :b 33})&quot; &quot;(nth {:a 1 :b 33} 0)&quot; &quot;(seq {:a 1 :b 33})&quot; &quot;(nth (seq {:a 1 :b 33} 0))&quot; &quot;(nth (seq {:a 1 :b 33}) 0)&quot; &quot;(coll? (seq {:a 1 :b 33}))&quot; &quot;(seq {:a 1 :b 33 :a 5})&quot; &quot;{:a 1 :b 33 :a 5}&quot; &quot;{:aa 1 :b 33 :a 5}&quot; &quot;(in-dictionary? \&quot;apple\&quot; word-dic)&quot; &quot;()&quot; &quot;(true? (in-dictionary? \&quot;apple\&quot; word-dic))&quot; &quot;(if (in-dictionary? \&quot;apple\&quot; word-dic) \&quot;yes\&quot; \&quot;no\&quot;)&quot; &quot;(if (in-dictionary? \&quot;applxe\&quot; word-dic) \&quot;yes\&quot; \&quot;no\&quot;)&quot; &quot;(if (in-dictionary? \&quot;li\&quot; word-dic) \&quot;yes\&quot; \&quot;no\&quot;)&quot; &quot;(if (in-dictionary? \&quot;la\&quot; word-dic) \&quot;yes\&quot; \&quot;no\&quot;)&quot; &quot;(if (in-dictionary? \&quot;ma\&quot; word-dic) \&quot;yes\&quot; \&quot;no\&quot;)&quot; &quot;(if (in-dictionary? \&quot;madam\&quot; word-dic) \&quot;yes\&quot; \&quot;no\&quot;)&quot; &quot;(if (in-dictionary? \&quot;madamself\&quot; word-dic) \&quot;yes\&quot; \&quot;no\&quot;)&quot; &quot;(in-dictionary? \&quot;appxle\&quot; word-dic)&quot; &quot;map&quot; &quot;maps-in-ans&quot; &quot;(decode [1 2 3 4] maps-in-ans)&quot; &quot;(decode [1 2 3 4] (nth maps-in-ans 0))&quot; &quot;(decode [1 2 3 4] {1 \\a 3 \\c})&quot; &quot;(filter number? (decode [1 2 3 4] {1 \\a 3 \\c}))&quot; &quot;(filter number? (decode [1 2 3 4 4 5 3] {1 \\a 3 \\c}))&quot; &quot;(distinct (filter number? (decode [1 2 3 4 4 5 3] {1 \\a 3 \\c})))&quot; &quot;(-&gt;\n  (decode [1 2 3 4 4 5 3] {1 \\a 3 \\c})\n  (filter number?)\n  (distinct)\n  (count))&quot; &quot;(-&gt;\n  (decode [1 2 3 4 4 5 3] {1 \\a 3 \\c})\n  (filter number?))\n  &quot; &quot;\n  (decode [1 2 3 4 4 5 3] {1 \\a 3 \\c})\n  \n  &quot; &quot;(filter number? *1)\n  \n  &quot; &quot;(distinct *1)\n  \n  &quot; &quot;(count *1)\n  \n  &quot; &quot;(/ 3)&quot; &quot;(dec 5)&quot; &quot;(test-cc-48 10)&quot; &quot;(score-clue [1 3 3 1] {1 \\a 3 \\c})&quot; &quot;(score-clue [1 3 3 1 4] {1 \\a 3 \\c})&quot; &quot;(doc dec)&quot; &quot;(decode [1 2 3 4 4 5 3] {1 \\a 3 \\c})&quot; &quot;(filter number? *1)&quot; &quot;(distinct *1)&quot; &quot;(count *1)&quot; &quot;(dec *1)&quot; &quot;(* (/  7) *1)&quot; &quot;(score-clue2 [1 2 3 4 4 5 3] {1 \\a 3 \\c})&quot; &quot;(+ -1 5)&quot; &quot;(score-clue [1 2 3 4 4 5 3] {1 \\a 3 \\c})&quot;], :remote []}}</component>
</project>